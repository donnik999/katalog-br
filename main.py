import logging
import random
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
import asyncio

API_TOKEN = '7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU'  # <-- –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã
CATEGORIES = {
    "–ü–î–î": [
        {"question": "–ö–∞–∫–æ–≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Black Russia?", "answer": "60 –∫–º/—á"},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ –æ–±–≥–æ–Ω—è—Ç—å –Ω–∞ —Å–ø–ª–æ—à–Ω–æ–π –ª–∏–Ω–∏–∏?", "answer": "–ù–µ—Ç"}
    ],
    "RP –∫–æ–º–∞–Ω–¥—ã": [
        {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /me –≤ RP –æ—Ç—ã–≥—Ä–æ–≤–∫–µ?", "answer": "–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"},
        {"question": "–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /do?", "answer": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏"}
    ],
    "–ê—Ä–µ—Å—Ç / –ø–æ–ª–∏—Ü–∏—è": [
        {"question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∞—Ä–µ—Å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ–ª–∏—Ü–∏–∏?", "answer": "–ü–æ–¥—á–∏–Ω–∏—Ç—å—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –æ—Ç—ã–≥—Ä—ã–≤–∞—Ç—å RP"},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –æ—Ç –∞—Ä–µ—Å—Ç–∞ –±–µ–∑ –æ—Ç—ã–≥—Ä–æ–≤–∫–∏?", "answer": "–ù–µ—Ç"}
    ]
}

user_stats = {}
user_current_question = {}
user_current_category = {}

# –°—Ç–∞—Ä—Ç / –ø–æ–º–æ—â—å
@router.message(Command("start", "help"))
async def start_handler(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø RP —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è Black Russia.\n"
        "–¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫: @bunkoc / @tunkoc\n"
        "–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.\n"
        "–ù–∞–ø–∏—à–∏ /top —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤."
    )
    await message.answer(text)

# –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_category_keyboard():
    buttons = [
        [InlineKeyboardButton(text=cat, callback_data=f"category:{cat}")]
        for cat in CATEGORIES.keys()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
@router.message(Command("quiz"))
async def quiz_handler(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda c: c.data.startswith("category:"))
async def category_selected(callback: types.CallbackQuery):
    cat = callback.data.split(":")[1]
    user_id = callback.from_user.id
    user_current_category[user_id] = cat
    user_stats.setdefault(user_id, {"correct": 0, "total": 0})
    await callback.message.edit_text(f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: <b>{cat}</b>")
    await send_new_question(user_id)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
def get_answer_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data="show_answer")]
        ]
    )

async def send_new_question(user_id):
    category = user_current_category[user_id]
    question = random.choice(CATEGORIES[category])
    user_current_question[user_id] = question
    await bot.send_message(
        user_id,
        f"‚ùì <b>{question['question']}</b>",
        reply_markup=get_answer_keyboard()
    )

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ—Ç–≤–µ—Ç
@router.message()
async def user_reply_handler(message: Message):
    user_id = message.from_user.id
    if user_id not in user_current_question:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ /quiz.")
        return

    question = user_current_question[user_id]
    correct_answer = question["answer"].lower()
    user_answer = message.text.lower()

    user_stats[user_id]["total"] += 1

    if len(correct_answer.split()) > 3 and correct_answer == user_answer:
        await message.answer("ü§î –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä—É–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!")
        return

    if user_answer == correct_answer:
        user_stats[user_id]["correct"] += 1
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>")

    await send_new_question(user_id)

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç
@router.callback_query(lambda c: c.data == "show_answer")
async def show_answer_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_current_question:
        await callback.answer("–ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å /quiz")
        return

    question = user_current_question[user_id]
    user_stats[user_id]["total"] += 1
    await callback.message.answer(f"üìå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{question['answer']}</b>")
    await send_new_question(user_id)

# –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(Command("top"))
async def top_handler(message: Message):
    if not user_stats:
        await message.answer("–¢–æ–ø –ø—É—Å—Ç. –ù–∏–∫—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —Ç–µ—Å—Ç.")
        return

    sorted_users = sorted(
        user_stats.items(),
        key=lambda x: x[1]["correct"],
        reverse=True
    )
    text = "<b>üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
    for i, (uid, stats) in enumerate(sorted_users[:10], 1):
        name = f"ID:{uid}"
        text += f"{i}. {name} ‚Äî {stats['correct']} –±–∞–ª–ª–æ–≤\n"

    await message.answer(text)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
