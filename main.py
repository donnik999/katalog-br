import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta

BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"

QUESTIONS_PATH = "data/questions.json"
COOLDOWN_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç

if not os.path.exists("data"):
    os.makedirs("data")

if not os.path.exists(QUESTIONS_PATH):
    with open(QUESTIONS_PATH, "w", encoding="utf-8") as f:
        json.dump({}, f, ensure_ascii=False, indent=2)

def load_questions():
    with open(QUESTIONS_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_questions(qdata):
    with open(QUESTIONS_PATH, "w", encoding="utf-8") as f:
        json.dump(qdata, f, ensure_ascii=False, indent=2)

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# user_id -> {—Ä–∞–∑–¥–µ–ª: time_of_last_try, ...}
user_cooldowns = {}

# user_id -> score
user_scores = {}

class QuizStates(StatesGroup):
    choosing_section = State()
    answering = State()

@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É Black Russia!</b>\n\n"
        "‚ùì –í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏!",
        reply_markup=main_menu()
    )

def main_menu():
    kb = [
        [types.KeyboardButton("üóÇ –†–∞–∑–¥–µ–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤")],
        [types.KeyboardButton("üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu(qdata):
    kb = [[types.KeyboardButton(text=f"üìö {section}")] for section in qdata]
    kb.append([types.KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def answers_kb(anslist):
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=a)] for a in anslist],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç"
    )

@dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîù <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=main_menu())

@dp.message(F.text == "üóÇ –†–∞–∑–¥–µ–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
async def choose_section(message: types.Message, state: FSMContext):
    qdata = load_questions()
    if not qdata:
        await message.answer("–†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    await state.set_state(QuizStates.choosing_section)
    await message.answer("<b>–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b>", reply_markup=sections_menu(qdata))

@dp.message(QuizStates.choosing_section)
async def section_selected(message: types.Message, state: FSMContext):
    section = message.text.replace("üìö ", "")
    qdata = load_questions()
    if section == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or section == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return
    if section not in qdata:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    now = datetime.utcnow()
    uid = str(message.from_user.id)
    cooldowns = user_cooldowns.get(uid, {})
    last_time = cooldowns.get(section)
    if last_time and (now - last_time).total_seconds() < COOLDOWN_SECONDS:
        mins = int((COOLDOWN_SECONDS - (now - last_time).total_seconds()) // 60) + 1
        await message.answer(f"‚è± –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {mins} –º–∏–Ω.")
        return

    questions = qdata[section]
    await state.update_data(
        section=section,
        questions=questions,
        index=0,
        score=0
    )
    await ask_question(message, state)

async def ask_question(message, state: FSMContext):
    data = await state.get_data()
    idx = data["index"]
    questions = data["questions"]
    section = data["section"]

    if idx >= len(questions):
        uid = str(message.from_user.id)
        user_scores[uid] = user_scores.get(uid, 0) + data["score"]
        cooldowns = user_cooldowns.get(uid, {})
        cooldowns[section] = datetime.utcnow()
        user_cooldowns[uid] = cooldowns
        await message.answer(
            f"‚úÖ <b>–†–∞–∑–¥–µ–ª \"{section}\" –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n"
            f"–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{data['score']} –∏–∑ {len(questions)}</b>\n\n"
            f"–¢—ã –º–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–ø–µ.",
            reply_markup=main_menu()
        )
        await state.clear()
        return

    q = questions[idx]
    await state.set_state(QuizStates.answering)
    await state.update_data(q_current=q)
    await message.answer(
        f"<b>–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(questions)}\n\n{q['question']}</b>",
        reply_markup=answers_kb(q["answers"])
    )

@dp.message(QuizStates.answering)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q = data["q_current"]
    idx = data["index"]
    questions = data["questions"]
    section = data["section"]
    score = data["score"]
    user_answer = message.text.strip()
    if user_answer not in q["answers"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    correct = q["answers"][q["correct"]]
    if user_answer == correct:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        score += 1
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>")

    idx += 1
    await state.update_data(index=idx, score=score)
    await ask_question(message, state)

@dp.message(F.text == "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤")
async def show_top(message: types.Message, state: FSMContext):
    if not user_scores:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º:</b>\n\n"
    for i, (uid, bal) in enumerate(top, 1):
        user = await bot.get_chat(uid)
        name = user.full_name if user else f"User {uid}"
        text += f"{i}. <b>{name}</b> ‚Äî {bal} –±–∞–ª–ª–æ–≤\n"
    await message.answer(text)

# === –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª –ø—Ä—è–º–æ –∏–∑ —á–∞—Ç–∞ ===
@dp.message(Command("addsection"))
async def add_section_cmd(message: types.Message):
    if message.from_user.id != 123456789:  # –£–∫–∞–∂–∏ —Å–≤–æ–π ID!
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    # –ü—Ä–∏–º–µ—Ä: /addsection [–Ω–∞–∑–≤–∞–Ω–∏–µ]
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsection –ù–∞–∑–≤–∞–Ω–∏–µ–†–∞–∑–¥–µ–ª–∞")
        return
    section = args[1].strip()
    qdata = load_questions()
    if section in qdata:
        await message.answer("–¢–∞–∫–æ–π —Ä–∞–∑–¥–µ–ª —É–∂–µ –µ—Å—Ç—å.")
        return
    qdata[section] = []
    save_questions(qdata)
    await message.answer(f"–†–∞–∑–¥–µ–ª <b>{section}</b> –¥–æ–±–∞–≤–ª–µ–Ω!")

# === –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ ===

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üõ† <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞–∑–¥–µ–ª—ã?</b>\n\n"
        "1. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª <code>data/questions.json</code> –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ.\n"
        "2. –î–æ–±–∞–≤—å —Ä–∞–∑–¥–µ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>{\n"
        "  \"–í–æ–π–Ω–∞ –∑–∞ –±–∏–∑–Ω–µ—Å\": [\n"
        "    {\n"
        "      \"question\": \"–í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–æ–π–Ω—É –∑–∞ –±–∏–∑–Ω–µ—Å?\",\n"
        "      \"answers\": [\"–° 00:00 –¥–æ 12:00\", \"–° 12:00 –¥–æ 23:00\", \"–° 18:00 –¥–æ 06:00\", \"–í –ª—é–±–æ–µ –≤—Ä–µ–º—è\"],\n"
        "      \"correct\": 1\n"
        "    }\n"
        "  ]\n"
        "}</code>\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É.\n\n"
        "‚ùóÔ∏è –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É <code>/addsection –ù–∞–∑–≤–∞–Ω–∏–µ–†–∞–∑–¥–µ–ª–∞</code> (–≤–æ–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª)."
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
