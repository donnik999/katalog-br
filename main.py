import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550  # <-- –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 6712617550)
DATA_FILE = "user_scores.json"
PHOTO_ID_FILE = "welcome_photo_id.json"
COOLDOWN_SEC = 3600  # 1 —á–∞—Å

SECTION_EMOJIS = {
    "common": "‚ùì",
    "numbers": "üî¢"
}
DEFAULT_SECTION_EMOJI = "üì¶"

SECTIONS = [
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å (–ë–∏–∑–í–∞—Ä)",
        "id": "bizwar",
        "questions": [
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –í–æ–π–Ω—É –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–° 12:00 –ø–æ 20:00", "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–° 12:00 –¥–æ 23:00", "–° 10:00 –¥–æ 18:00"],
                "answer": 2
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–û—Ç 5 –¥–æ 15", "–¢–æ–ª—å–∫–æ 5", "–ù–µ –º–µ–Ω—å—à–µ 20"],
                "answer": 1
            }, 
            {
                "question": "–ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["15 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤", "2 —á–∞—Å–∞"],
                "answer": 3
            }, 
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ü–ì –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–æ–≥—É—Ç –≤—Å–µ 3", "–¢–æ–ª—å–∫–æ 2"], 
                "answer": 2
            }, 
            {
                "question": "–í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ä–∞–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ë–∏–∑–≤–∞—Ä—ã (–ë–µ–∑ –æ–±–æ—é–¥–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è)",
                "options": ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/–°—Ä–µ–¥–∞/–ü—è—Ç–Ω–∏—Ü–∞/–°—É–±–±–æ—Ç–∞", "–í –ª—é–±–æ–π –¥–µ–Ω—å", "–í—Ç–æ—Ä–Ω–∏–∫/–ß–µ—Ç–≤–µ—Ä–≥/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–¢–æ–ª—å–∫–æ –≤ —Å—É–±–±–æ—Ç—É"],
                "answer": 0
            }, 
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –û–ü–ì –º–æ–∂–µ—Ç –∑–∞–±–∏–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—É –¥—Ä—É–≥–æ–π –û–ü–ì –∑–∞ –¥–µ–Ω—å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ù–µ –º–µ–Ω—å—à–µ 2", "–¢–æ–ª—å–∫–æ 4", "–¢–æ–ª—å–∫–æ 1"],
                "answer": 2
            }, 
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–†–∞–∑—Ä–µ—à–µ–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏"], 
                "answer": 2
            }, 
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /bizwar?",
                "options": ["–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–°—Ç—Ä–æ–≥–æ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ë–∏–∑–≤–∞—Ä–∞", "–í —Ö—Ö:15", "–í —Ö—Ö:55"],
                "answer": 1
            }, 
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–∏—á–∏–Ω", "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç –∞–¥–º–∏–Ω"],
                "answer": 2
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–±–∏–≤–∞—Ç—å —Ç–µ–º–ø —Å—Ç—Ä–µ–ª—å–±—ã –≤–æ –≤—Ä–µ–º—è –ë–∏–∑–≤–∞—Ä–∞?",
                "options": ["–î–∞, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º –û–ü–ì", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ"], 
                "answer": 0
            }

        ]
    },
    {
        "title": "–ß–∏—Å–ª–∞",
        "id": "numbers",
        "questions": [
            {
                "question": "5 * 6 = ?",
                "options": ["11", "30", "56", "26"],
                "answer": 1
            }
        ]
    }
]

HELP_TEXT = (
    "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n"
    "‚Äî <b>–ë–∞–ª–ª—ã</b>: –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –±–∞–ª–ª. ‚ö°\n"
    "‚Äî <b>–ö—É–ª–¥–∞—É–Ω</b>: –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —á–∞—Å ‚è≥\n"
    "‚Äî <b>–°–≤—è–∑—å —Å –∞–≤—Ç–æ—Ä–æ–º</b>: <a href='https://t.me/bunkoc'>@bunkoc</a> (–∂–º–∏ –Ω–∞ –Ω–∏–∫ –∏–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ)\n"
    "‚Äî <b>–í–æ–ø—Ä–æ—Å—ã –≤–∑—è—Ç—ã —Å —Ñ–æ—Ä—É–º–∞ –∏–≥—Ä–æ–≤–æ–π –ø–ª–æ—â–∞–¥–∫–∏ Black Russia üïπ</b>\n"
    "\n"
    "–ú–µ–Ω—é: /menu\n"
    "–í–µ—Ä–Ω—É—Ç—å—Å—è: 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"
)

WELCOME_TEXT = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä/–≤–∏–∫—Ç–æ—Ä–∏–Ω—É Black Russia!</b>\n\n"
    "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏–∑ –º–∏—Ä–∞ Black Russia.\n"
    "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã = –±–∞–ª–ª—ã, –∞ –ª—É—á—à–∏–π ‚Äî –≤ —Ç–æ–ø–µ! üéâ"
)

PROFILE_TEMPLATE = (
    "üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
    "‚îè ID: <code>{user_id}</code>\n"
    "‚î£ –ë–∞–ª–ª—ã: <b>{score}</b> ‚≠ê\n"
    "‚îó –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: <b>{place}</b> üèÜ"
)

TOP_HEADER = "üèÜ <b>–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ Black Russia:</b>\n"

class Quiz(StatesGroup):
    section = State()
    question = State()
    waiting_continue = State()
    waiting_photo = State()

user_scores = {}
user_cooldowns = {}

def load_scores():
    global user_scores, user_cooldowns
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_scores = data.get("scores", {})
            user_cooldowns = data.get("cooldowns", {})
    else:
        user_scores = {}
        user_cooldowns = {}

def save_scores():
    data = {
        "scores": user_scores,
        "cooldowns": user_cooldowns
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_photo_id(photo_id):
    with open(PHOTO_ID_FILE, 'w', encoding="utf-8") as f:
        json.dump({"photo_id": photo_id}, f)

def load_photo_id():
    try:
        if os.path.exists(PHOTO_ID_FILE):
            with open(PHOTO_ID_FILE, 'r', encoding="utf-8") as f:
                d = json.load(f)
                return d.get("photo_id")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ welcome_photo_id.json: {e}")
    return None

def main_menu(user_id=None):
    kb = [
        [KeyboardButton(text="üìö –†–∞–∑–¥–µ–ª—ã")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢–æ–ø")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    if user_id == ADMIN_ID:
        kb.append([KeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")])
        kb.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu():
    kb = []
    for sec in SECTIONS:
        emoji = SECTION_EMOJIS.get(sec['id'], DEFAULT_SECTION_EMOJI)
        kb.append([KeyboardButton(text=f"{emoji} {sec['title']}")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def question_kb(options):
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=o)] for o in options], resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def continue_kb():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")]], resize_keyboard=True)

def author_inline():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≤—Ç–æ—Ä–æ–º", url="https://t.me/bunkoc")]
        ]
    )

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    photo_id = load_photo_id()
    await state.clear()
    if photo_id:
        await message.answer_photo(photo_id, caption=WELCOME_TEXT, reply_markup=main_menu(message.from_user.id))
    else:
        await message.answer(WELCOME_TEXT, reply_markup=main_menu(message.from_user.id))

@dp.message(Command("menu"))
async def menu_cmd(message: types.Message, state: FSMContext):
    photo_id = load_photo_id()
    await state.clear()
    if photo_id:
        await message.answer_photo(photo_id, caption="üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu(message.from_user.id))
    else:
        await message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_cmd(message: types.Message, state: FSMContext):
    photo_id = load_photo_id()
    await state.clear()
    if photo_id:
        await message.answer_photo(photo_id, caption="üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu(message.from_user.id))
    else:
        await message.answer("üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>", reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_cmd(message: types.Message):
    await message.answer(HELP_TEXT, reply_markup=author_inline(), disable_web_page_preview=True)

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    score = user_scores.get(user_id, 0)
    sorted_scores = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)
    place = next((i+1 for i, (uid, _) in enumerate(sorted_scores) if uid == user_id), "-")
    text = PROFILE_TEMPLATE.format(user_id=user_id, score=score, place=place)
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üèÜ –¢–æ–ø")
async def top_cmd(message: types.Message):
    if not user_scores:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª—ã. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!", reply_markup=main_menu(message.from_user.id))
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = TOP_HEADER
    for i, (uid, score) in enumerate(top, 1):
        text += f"{i}) <code>{uid}</code> ‚Äî <b>{score}‚≠ê</b>\n"
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üìö –†–∞–∑–¥–µ–ª—ã")
async def sections_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=sections_menu())

@dp.message(lambda m: m.text and any(m.text.startswith(SECTION_EMOJIS.get(sec['id'], DEFAULT_SECTION_EMOJI)) for sec in SECTIONS))
async def start_section(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    for sec in SECTIONS:
        emoji = SECTION_EMOJIS.get(sec['id'], DEFAULT_SECTION_EMOJI)
        if message.text.startswith(emoji):
            section = sec
            break
    else:
        await message.answer("–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu(message.from_user.id))
        return
    sid = section["id"]
    now = datetime.now().timestamp()
    user_cd = user_cooldowns.get(user_id, {})
    if not isinstance(user_cd, dict):
        user_cd = {}
        user_cooldowns[user_id] = {}
    cd = user_cd.get(sid, 0)
    if now < cd:
        left = int(cd - now)
        await message.answer(f"‚è≥ –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫—É–ª–¥–∞—É–Ω! –ü–æ–≤—Ç–æ—Ä–Ω–æ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ {left//60} –º–∏–Ω {left%60} —Å–µ–∫.", reply_markup=main_menu(message.from_user.id))
        return
    await state.set_state(Quiz.question)
    await state.update_data(sec_id=sid, q_idx=0, score=0, wrong=False)
    q = section["questions"][0]
    await message.answer(f"<b>–í–æ–ø—Ä–æ—Å 1/{len(section['questions'])}:</b>\n{q['question']}", reply_markup=question_kb(q["options"]))

@dp.message(Quiz.question)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sec_id = data["sec_id"]
    section = next(sec for sec in SECTIONS if sec["id"] == sec_id)
    questions = section["questions"]
    q_idx = data["q_idx"]
    score = data["score"]
    q = questions[q_idx]
    user_ans = message.text.strip()
    if user_ans not in q["options"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π.", reply_markup=question_kb(q["options"]))
        return
    if q["options"].index(user_ans) == q["answer"]:
        score += 1
        await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! +1 –±–∞–ª–ª", reply_markup=continue_kb())
        await state.set_state(Quiz.waiting_continue)
        await state.update_data(score=score, wrong=False)
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{q['options'][q['answer']]}</b>", reply_markup=continue_kb())
        await state.set_state(Quiz.waiting_continue)
        await state.update_data(wrong=True)

@dp.message(Quiz.waiting_continue)
async def continue_after_wrong(message: types.Message, state: FSMContext):
    if message.text != "‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
        await message.answer("–ù–∞–∂–º–∏ ‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.", reply_markup=continue_kb())
        return
    data = await state.get_data()
    sec_id = data["sec_id"]
    section = next(sec for sec in SECTIONS if sec["id"] == sec_id)
    questions = section["questions"]
    q_idx = data["q_idx"] + 1
    score = data["score"]
    if q_idx < len(questions):
        await state.set_state(Quiz.question)
        await state.update_data(q_idx=q_idx)
        q = questions[q_idx]
        await message.answer(f"<b>–í–æ–ø—Ä–æ—Å {q_idx+1}/{len(questions)}:</b>\n{q['question']}", reply_markup=question_kb(q["options"]))
    else:
        user_id = str(message.from_user.id)
        user_scores[user_id] = user_scores.get(user_id, 0) + score
        cd_until = (datetime.now() + timedelta(seconds=COOLDOWN_SEC)).timestamp()
        user_cooldowns.setdefault(user_id, {})[sec_id] = cd_until
        save_scores()
        await message.answer(
            f"üéâ <b>–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!</b>\n–¢—ã –Ω–∞–±—Ä–∞–ª: <b>{score} –∏–∑ {len(questions)}</b> –∑–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.\n"
            f"–¢–≤–æ–π –æ–±—â–∏–π —Å—á—ë—Ç: <b>{user_scores[user_id]}‚≠ê</b>\n\n"
            f"‚è≥ –ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞–ª–æ–∂–µ–Ω –∫—É–ª–¥–∞—É–Ω: <b>{COOLDOWN_SEC//60} –º–∏–Ω—É—Ç</b>.",
            reply_markup=main_menu(message.from_user.id)
        )
        await state.clear()

@dp.message(F.text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
async def change_photo_command(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(Quiz.waiting_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")

@dp.message(Quiz.waiting_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    photo_id = message.photo[-1].file_id
    save_photo_id(photo_id)
    await state.clear()
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ /start –∏ –≤ –º–µ–Ω—é.")
    await message.answer_photo(photo_id, caption="–í–æ—Ç –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å!", reply_markup=main_menu(message.from_user.id))

@dp.message(Quiz.waiting_photo)
async def handle_photo_fail(message: types.Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ!")

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu())

@dp.message(F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def admin_save(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    save_scores()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=admin_menu())

@dp.message(F.text == "üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø")
async def admin_show(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await top_cmd(message)

@dp.message(F.text == "üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø")
async def admin_reset(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global user_scores
    user_scores = {}
    save_scores()
    await message.answer("–¢–æ–ø —Å–±—Ä–æ—à–µ–Ω.", reply_markup=admin_menu())

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ñ–º–∏ 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–ª–∏ /menu.")

load_scores()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
