import os
import json
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup
)
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550  # –£–∫–∞–∂–∏ —Å–≤–æ–π ID
DATA_FILE = "data.json"
PHOTO_ID_FILE = "welcome_photo_id.json"
COOLDOWN_SEC = 5 * 60

# --- –®–∞–±–ª–æ–Ω —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö ---

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∏—Ö —Ä–∞–∑–¥–µ–ª—ã (–ø–æ id)
CATEGORY_SECTIONS = {
    "–î–ª—è –û–ü–ì": ["bizwar"],
    "–î–ª—è –ì–æ—Å—Å": ["goss_example"]
}

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª–æ–≤
SECTIONS = [
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å (–ë–∏–∑–í–∞—Ä)",
        "id": "bizwar",
        "questions": [
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –í–æ–π–Ω—É –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–° 12:00 –ø–æ 20:00", "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–° 12:00 –¥–æ 23:00", "–° 10:00 –¥–æ 18:00"],
                "answer": 2
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–û—Ç 5 –¥–æ 15", "–¢–æ–ª—å–∫–æ 5", "–ù–µ –º–µ–Ω—å—à–µ 20"],
                "answer": 1
            },
            {
                "question": "–ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["15 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤", "2 —á–∞—Å–∞"],
                "answer": 3
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ü–ì –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–æ–≥—É—Ç –≤—Å–µ 3", "–¢–æ–ª—å–∫–æ 2"],
                "answer": 2
            },
            {
                "question": "–í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ë–∏–∑–≤–∞—Ä—ã (–ë–µ–∑ –æ–±–æ—é–¥–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è)",
                "options": ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/–°—Ä–µ–¥–∞/–ü—è—Ç–Ω–∏—Ü–∞/–°—É–±–±–æ—Ç–∞", "–í –ª—é–±–æ–π –¥–µ–Ω—å", "–í—Ç–æ—Ä–Ω–∏–∫/–ß–µ—Ç–≤–µ—Ä–≥/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–¢–æ–ª—å–∫–æ –≤ —Å—É–±–±–æ—Ç—É"],
                "answer": 0
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –û–ü–ì –º–æ–∂–µ—Ç –∑–∞–±–∏–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—É –¥—Ä—É–≥–æ–π –û–ü–ì –∑–∞ –¥–µ–Ω—å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ù–µ –º–µ–Ω—å—à–µ 2", "–¢–æ–ª—å–∫–æ 4", "–¢–æ–ª—å–∫–æ 1"],
                "answer": 2
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–†–∞–∑—Ä–µ—à–µ–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏"],
                "answer": 2
            },
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /bizwar?",
                "options": ["–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–°—Ç—Ä–æ–≥–æ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ë–∏–∑–≤–∞—Ä–∞", "–í —Ö—Ö:15", "–í —Ö—Ö:55"],
                "answer": 1
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–∏—á–∏–Ω", "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç –∞–¥–º–∏–Ω"],
                "answer": 2
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–±–∏–≤–∞—Ç—å —Ç–µ–º–ø —Å—Ç—Ä–µ–ª—å–±—ã –≤–æ –≤—Ä–µ–º—è –ë–∏–∑–≤–∞—Ä–∞?",
                "options": ["–î–∞, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º –û–ü–ì", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ"],
                "answer": 0
            }
        ]
    },
    {
        "id": "goss_example",
        "title": "–ü—Ä–∏–º–µ—Ä –≥–æ—Å. —Ä–∞–∑–¥–µ–ª–∞",
        "questions": [
            {
                "question": "–í–æ–ø—Ä–æ—Å –¥–ª—è –≥–æ—Å. —Ä–∞–∑–¥–µ–ª–∞?",
                "options": ["–û—Ç–≤–µ—Ç 1", "–û—Ç–≤–µ—Ç 2", "–û—Ç–≤–µ—Ç 3", "–û—Ç–≤–µ—Ç 4"],
                "answer": 0
            }
            # ...–∑–¥–µ—Å—å –¥–æ–±–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã...
        ]
    }
    # ...–¥–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É...
]
# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
SECTION_EMOJIS = {
    "bizwar": "üíº",
    "goss_example": "üèõ"
}
DEFAULT_SECTION_EMOJI = "üìö"

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class Quiz(StatesGroup):
    choosing_category = State()
    choosing_section = State()
    answering = State()
    waiting_photo = State()

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞–ª–ª–æ–≤ –∏ –∫—É–ª–¥–∞—É–Ω–æ–≤ ---
user_scores = {}
user_cooldowns = {}

# --- –§—É–Ω–∫—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ---

def load_scores():
    global user_scores, user_cooldowns
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_scores = data.get("scores", {})
            uscores = {}
        user_cooldowns = {}

def save_scores():
    data = {
        "scores": user_scores,
        "cooldowns": user_cooldowns
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_photo_id(photo_id):
    with open(PHOTO_ID_FILE, 'w', encoding="utf-8") as f:
        json.dump({"photo_id": photo_id}, f)

def load_photo_id():
    try:
        if os.path.exists(PHOTO_ID_FILE):
            with open(PHOTO_ID_FILE, 'r', encoding="utf-8") as f:
                d = json.load(f)
                return d.get("photo_id")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ welcome_photo_id.json: {e}")
    return None

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def main_menu(user_id=None):
    kb = [
        [KeyboardButton(text="üìö –†–∞–∑–¥–µ–ª—ã")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢–æ–ø")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    if user_id == ADMIN_ID:
        kb.append([KeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")])
        kb.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def categories_menu():
    kb = [[KeyboardButton(text=cat)] for cat in CATEGORY_SECTIONS.keys()]
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu(category):
    kb = []
    section_ids = CATEGORY_SECTIONS[category]
    for sec_id in section_ids:
        section = next((s for s in SECTIONS if s["id"] == sec_id), None)
        if section:
            emoji = SECTION_EMOJIS.get(sec_id, DEFAULT_SECTION_EMOJI)
            kb.append([KeyboardButton(text=f"{emoji} {section['title']}")])
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def question_kb(options):
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=o)] for o in options], resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def continue_kb():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")]], resize_keyboard=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    photo_id = load_photo_id()
    caption = (
        "<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É Black Russia!</b>\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
    if photo_id:
        await message.answer_photo(
            photo=photo_id,
            caption=caption,
            parse_mode="HTML",
            reply_markup=main_menu(message.from_user.id)
        )
    else:
        await message.answer(
            caption, 
            reply_markup=main_menu(message.from_user.id)
        )

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîù <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await cmd_menu(message, state)

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    text = (
        "<b>üïπ –û –±–æ—Ç–µ –∏ —Å–∏—Å—Ç–µ–º–µ –±–∞–ª–ª–æ–≤</b>\n\n"
        "–≠—Ç–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ Black Russia!\n"
        "–í—ã–±–∏—Ä–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª –∏ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n"
        "–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å 1 –±–∞–ª–ª.\n"
        "<b>–ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç.</b>\n"
        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.\n"
        "–†–∞–∑–¥–µ–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –±—É–¥—É—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.\n\n"
        "–°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤!\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî <b>@bunkoc</b> (–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π).\n"
        "–£–¥–∞—á–∏!"
    )
    await message.answer(text)

@dp.message(F.text == "üìö –†–∞–∑–¥–µ–ª—ã")
async def choose_category(message: types.Message, state: FSMContext):
    await state.set_state(Quiz.choosing_category)
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=categories_menu())

@dp.message(Quiz.choosing_category)
async def category_selected(message: types.Message, state: FSMContext):
    category = message.text.strip()
    if category == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id))
        await state.clear()
        return
    if category not in CATEGORY_SECTIONS:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(category=category)
    await state.set_state(Quiz.choosing_section)
    await message.answer(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b> {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=sections_menu(category)
    )

@dp.message(Quiz.choosing_section)
async def section_selected(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    if message.text == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await state.set_state(Quiz.choosing_category)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_menu())
        return
    if message.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(message.from_user.id))
        return
    # –£–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ title
    section_title = message.text
    for emoji in SECTION_EMOJIS.values():
        section_title = section_title.replace(emoji, "")
    section_title = section_title.strip()
    section_ids = CATEGORY_SECTIONS[category]
    section = next((s for s in SECTIONS if s["id"] in section_ids and s["title"] == section_title), None)
    if not section:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç.")
        return
    await state.update_data(section_id=section["id"], q_index=0)
    await state.set_state(Quiz.answering)
    q = section["questions"][0]
    await message.answer(
        f"<b>{q['question']}</b>",
        reply_markup=question_kb(q["answers"])
    )

@dp.message(Quiz.answering)
async def answer_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data["category"]
    section_id = data["section_id"]
    q_index = data["q_index"]
    section = next((s for s in SECTIONS if s["id"] == section_id), None)
    if not section:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–∞.")
        await state.clear()
        return
    q = section["questions"][q_index]
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    answer = message.text.strip()
    correct = False
    try:
        correct = q["answers"].index(answer) == q["correct"]
    except Exception:
        pass
    # –ë–∞–ª–ª—ã, –∫—É–ª–¥–∞—É–Ω, –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É...
    if correct:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        # –¢—É—Ç —É–≤–µ–ª–∏—á—å –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ—Å—Ç–∞–≤—å –∫—É–ª–¥–∞—É–Ω
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['answers'][q['correct']]}")
    if q_index + 1 < len(section["questions"]):
        await state.update_data(q_index=q_index + 1)
        next_q = section["questions"][q_index + 1]
        await message.answer(
            f"<b>{next_q['question']}</b>",
            reply_markup=question_kb(next_q["answers"])
        )
    else:
        await message.answer("–†–∞–∑–¥–µ–ª –ø—Ä–æ–π–¥–µ–Ω!", reply_markup=main_menu(message.from_user.id))
        await state.clear()

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    score = user_scores.get(user_id, 0)
    place = sorted(user_scores.values(), reverse=True).index(score) + 1 if score else "-"
    text = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"‚îè ID: <code>{user_id}</code>\n"
        f"‚î£ –ë–∞–ª–ª—ã: <b>{score}</b> ‚≠ê\n"
        f"‚îó –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: <b>{place}</b> üèÜ"
    )
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üèÜ –¢–æ–ø")
async def top_cmd(message: types.Message):
    if not user_scores:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª—ã. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!", reply_markup=main_menu(message.from_user.id))
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n"
    for i, (uid, score) in enumerate(top, 1):
        text += f"{i}) <code>{uid}</code> ‚Äî <b>{score}‚≠ê</b>\n"
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

# --- –ü—Ä–∏–º–µ—Ä –∞–¥–º–∏–Ω–∫–∏, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ ---

@dp.message(F.text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
async def change_photo_command(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(Quiz.waiting_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")

@dp.message(Quiz.waiting_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    photo_id = message.photo[-1].file_id
    save_photo_id(photo_id)
    await state.clear()
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ /start –∏ –≤ –º–µ–Ω—é.")
    await message.answer_photo(photo_id, caption="–í–æ—Ç –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å!", reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu())

@dp.message(F.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def admin_save(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    save_scores()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=admin_menu())

@dp.message(F.text == "üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø")
async def admin_show(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await top_cmd(message)

@dp.message(F.text == "üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø")
async def admin_reset(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    global user_scores
    user_scores = {}
    save_scores()
    await message.answer("–¢–æ–ø —Å–±—Ä–æ—à–µ–Ω.", reply_markup=admin_menu())

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ñ–º–∏ 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–ª–∏ /menu.")

# --- –ó–∞–ø—É—Å–∫ ---

load_scores()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
