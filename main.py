import os
import json
import time
import random
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550  # –£–∫–∞–∂–∏ —Å–≤–æ–π id
DATA_FILE = "data.json"
PHOTO_ID_FILE = "welcome_photo_id.json"
VIDEO_ID_FILE = "welcome_video_id.json"
COOLDOWN_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç

CATEGORY_EMOJIS = {
    "–î–ª—è –û–ü–ì": "üî™", 
    "–î–ª—è –ì–û–°–°": "üè¢"
}

CATEGORY_SECTIONS = {
    "–î–ª—è –û–ü–ì": ["bizwar", "pohitil", "poezdka"], 
    "–î–ª—è –ì–û–°–°": {
        "–ê—Ä–º–∏—è": ["deportament", "perevod"],
        "–£–ú–í–î/–ì–ò–ë–î–î": ["deportament", "perevod"],
        "–§–°–ë": ["deportament", "perevod"],
        "–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ": ["deportament", "perevod"],
        "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –±–æ–ª—å–Ω–∏—Ü–∞": ["deportament", "perevod"],
        "–°–ú–ò": ["deportament", "perevod"],
        "–§–°–ò–ù": ["deportament", "perevod"]
    }
}

SECTION_EMOJIS = {
    "bizwar": "üíº",
    "pohitil": "üí∞ü•∑",
    "poezdka": "üöö", 
    "deportament": "üìû", 
    "perevod": "üîÑ"
}
DEFAULT_SECTION_EMOJI = "üìö"

SECTIONS = [
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å (–ë–∏–∑–í–∞—Ä)",
        "id": "bizwar",
        "questions": [
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –í–æ–π–Ω—É –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–° 12:00 –ø–æ 20:00", "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–° 12:00 –¥–æ 23:00", "–° 10:00 –¥–æ 18:00"],
                "answer": 2
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–û—Ç 5 –¥–æ 15", "–¢–æ–ª—å–∫–æ 5", "–ù–µ –º–µ–Ω—å—à–µ 20"],
                "answer": 1
            },
            {
                "question": "–ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ–º –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["15 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–ù–µ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤", "2 —á–∞—Å–∞"],
                "answer": 3
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –û–ü–ì –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–æ–≥—É—Ç –≤—Å–µ 3", "–¢–æ–ª—å–∫–æ 2"],
                "answer": 2
            },
            {
                "question": "–í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ë–∏–∑–≤–∞—Ä—ã (–ë–µ–∑ –æ–±–æ—é–¥–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è)",
                "options": ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫/–°—Ä–µ–¥–∞/–ü—è—Ç–Ω–∏—Ü–∞/–°—É–±–±–æ—Ç–∞", "–í –ª—é–±–æ–π –¥–µ–Ω—å", "–í—Ç–æ—Ä–Ω–∏–∫/–ß–µ—Ç–≤–µ—Ä–≥/–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–¢–æ–ª—å–∫–æ –≤ —Å—É–±–±–æ—Ç—É"],
                "answer": 0
            },
            {
                "question": "–ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑ –û–ü–ì –º–æ–∂–µ—Ç –∑–∞–±–∏–≤–∞—Ç—å —Å—Ç—Ä–µ–ª—É –¥—Ä—É–≥–æ–π –û–ü–ì –∑–∞ –¥–µ–Ω—å?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ù–µ –º–µ–Ω—å—à–µ 2", "–¢–æ–ª—å–∫–æ 4", "–¢–æ–ª—å–∫–æ 1"],
                "answer": 2
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ø—Ç–µ—á–∫–∏ –ø—Ä–∏ –≤–æ–π–Ω–µ –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–†–∞–∑—Ä–µ—à–µ–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏"],
                "answer": 2
            },
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å–ª–µ–¥—É–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /bizwar?",
                "options": ["–í –ª—é–±–æ–µ –≤—Ä–µ–º—è", "–°—Ç—Ä–æ–≥–æ –∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ë–∏–∑–≤–∞—Ä–∞", "–í —Ö—Ö:15", "–í —Ö—Ö:55"],
                "answer": 1
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å–æ–∫ –≤–æ –≤—Ä–µ–º—è –≤–æ–π–Ω—ã –∑–∞ –±–∏–∑–Ω–µ—Å?",
                "options": ["–î–∞, –±–µ–∑ –≤—Å—è–∫–∏—Ö –ø—Ä–∏—á–∏–Ω", "–î–∞, –Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ï—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–∏—Ç –∞–¥–º–∏–Ω"],
                "answer": 2
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ —Å–±–∏–≤–∞—Ç—å —Ç–µ–º–ø —Å—Ç—Ä–µ–ª—å–±—ã –≤–æ –≤—Ä–µ–º—è –ë–∏–∑–≤–∞—Ä–∞?",
                "options": ["–î–∞, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º –û–ü–ì", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ"],
                "answer": 0
            }, 
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ë–∏–∑–≤–∞—Ä–∞",
                "options": ["–î–∞, –µ—Å–ª–∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å –¥—Ä—É–≥–∏–º –û–ü–ì", "–ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ"],
                "answer": 1
            }
        ]
    }, 
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–π/–ü–æ—Ö–∏—â–µ–Ω–∏–π",
        "id": "pohitil",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
        "questions": [
            {
                "question": "–ì–¥–µ —Å–ª–µ–¥—É–µ—Ç –ø–æ—Ö–∏—â–∞—Ç—å/–≥—Ä–∞–±–∏—Ç—å –∂–µ—Ä—Ç–≤—É?",
                "options": ["–í –ª—é–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –≤ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω–µ", "–£ –∑–¥–∞–Ω–∏—è –ì–ò–ë–î–î", "–í –±–µ–∑–ª—é–¥–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –∏ –≤ –º–µ—Å—Ç–∞—Ö –±–µ–∑ –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã", "–ì–¥–µ —É–≥–æ–¥–Ω–æ"],
                "answer": 2
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥—Ä–∞–±–∏—Ç–µ–ª–µ–π/–ü–æ—Ö–∏—Ç–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –û–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –∏–ª–∏ –ü–æ—Ö–∏—â–µ–Ω–∏–∏? ",
                "options": ["–¢–æ–ª—å–∫–æ 3 —á–µ–ª–æ–≤–µ–∫–∞", "–¢–æ–ª—å–∫–æ 1 —á–µ–ª–æ–≤–µ–∫", "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ 2 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —á–µ–º –∂–µ—Ä—Ç–≤ –ø–æ—Ö–∏—â–µ–Ω–∏–π/–æ–≥—Ä–∞–±–ª–µ–Ω–∏—è", "–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"],
                "answer": 2
            },
            {
                "question": "–ù—É–∂–Ω–∞ –ª–∏ –ú–∞—Å–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ—Ö–∏—â–µ–Ω–∏–∏?",
                "options": ["–¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∞–º –∑–∞—Ö–æ—á–µ—à—å", "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å", "–ù–µ –Ω—É–∂–Ω–∞"],
                "answer": 1
            },
            {
                "question": "–ú–æ–∂–Ω–æ –ª–∏ —É–±–∏–≤–∞—Ç—å –∂–µ—Ä—Ç–≤—É?",
                "options": ["–î–∞, –¥–∞–∂–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", "–í –ª—é–±—ã—Ö —Å–ª—É—á–∞—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ, –µ—Å–ª–∏ –∂–µ—Ä—Ç–≤–∞ –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ —Å–µ–±—è –≤–µ–¥—ë—Ç –∏–ª–∏ —É–≥—Ä–æ–∂–∞–µ—Ç"],
                "answer": 2
            },
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∞—Ç—å –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ?",
                "options": ["–° 12:00 –¥–æ 23:00", "–° 9:00 –¥–æ 18:00", "–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", "–¢–æ–ª—å–∫–æ –≤ 19:00"],
                "answer": 2
            },
            {
                "question": "–ö–∞–∫—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏?",
                "options": ["20.000 —Ä—É–±–ª–µ–π", "10.000 —Ä—É–±–ª–µ–π", " –°—É–º–º–∞ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–µ–¥–µ–ª–∞", "5.000 —Ä—É–±–ª–µ–π"],
                "answer": 3
            },
            {
                "question": "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–æ—Ö–∏—â–µ–Ω–∏—è?",
                "options": ["–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", "–ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω—ã–µ, —Ç–æ –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ", "–° 06:00 –¥–æ 12:00", "–° 18:00 –¥–æ 08:00 –Ω–æ–≤–æ–≥–æ –¥–Ω—è"],
                "answer": 3
            },
            {
                "question": "–ö–∞–∫–∞—è —Å—É–º–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∫—É–ø–∞ –∑–∞ –û–±—ã—á–Ω–æ–≥–æ –ò–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ü–æ—Ö–∏—â–µ–Ω–∏–∏?",
                "options": ["–î–æ 100.000 —Ä—É–±–ª–µ–π", "–î–æ 30.000 —Ä—É–±–ª–µ–π", "–ù–µ—Ç –ø—Ä–µ–¥–µ–ª–∞", "–¢–æ–ª—å–∫–æ 5.000 —Ä—É–±–ª–µ–π"],
                "answer": 1
            },
            {
                "question": "–ö–∞–∫–∞—è —Å—É–º–º–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–∫—É–ø–∞ –∑–∞ –õ–∏–¥–µ—Ä–∞/–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—è —Ñ—Ä–∞–∫—Ü–∏–π –ø—Ä–∏ –ü–æ—Ö–∏—â–µ–Ω–∏–∏?",
                "options": ["100.000 —Ä—É–±–ª–µ–π", "50.000 —Ä—É–±–ª–µ–π", "–ù–µ–ª—å–∑—è –ø—Ä–æ—Å–∏—Ç—å –≤—ã–∫—É–ø", "25.000 —Ä—É–±–ª–µ–π"],
                "answer": 0
            },
            {
                "question": "–°–∫–æ–ª—å–∫–æ –ø–æ—Ö–∏—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–¥–Ω–æ–π –û–ü–ì?",
                "options": ["–¢–æ–ª—å–∫–æ 2 —Ä–∞–∑–∞", "–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", "–¢–æ–ª—å–∫–æ 1 —Ä–∞–∑", "–î–æ 10 —Ä–∞–∑"],
                "answer": 0
            }
        ]
    }, 
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –Ω–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –≤/—á (–ü–æ–ª—è–Ω—É)",
        "id": "poezdka",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
        "questions": [
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–ø—Ç–µ—á–µ–∫–µ/–Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤ –ø—Ä–∏ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏?",
                "options": [" –ö–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ", "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", "–ú–æ–∂–Ω–æ,–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —É–∫—Ä—ã—Ç–∏–∏", "–ú–æ–∂–Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"],
                "answer": 2
            },
            {
                "question": "–ö–∞–∫–æ–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ –≤/—á?",
                "options": ["–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ù–µ –º–µ–Ω—å—à–µ 5", "–ù–µ –º–µ–Ω—å—à–µ 3", "–¢–æ–ª—å–∫–æ 10"],
                "answer": 1
            },
            {
                "question": "–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ –≤/—á?",
                "options": ["–ú–∞–∫—Å–∏–º—É–º 15 —á–µ–ª–æ–≤–µ–∫", "–ù–µ –±–æ–ª—å—à–µ 10", "–õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¢–æ–ª—å–∫–æ 30 —á–µ–ª–æ–≤–µ–∫"],
                "answer": 2
            },
            {
                "question": "–° –∫–∞–∫–æ–≥–æ –ø–æ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∫—Ä–∞—Å—Ç—å –ø–∞—Ç—Ä–æ–Ω—ã?",
                "options": ["–° 23:00 –¥–æ 6:00", "–° 18:00 –¥–æ 24:00", "–° 12:00 –¥–æ 22:00", "–° 6:00 –¥–æ 23:00"],
                "answer": 0
            },
            {
                "question": " –ö–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –Ω–∞–ø–∞–¥–µ–Ω–∏—è–º–∏ –Ω–∞ –≤/—á?",
                "options": ["–ö–∞–∂–¥—ã–µ 2 —á–∞—Å–∞", "30 –º–∏–Ω—É—Ç", "1 —á–∞—Å", "–ú–æ–∂–Ω–æ —Ö–æ—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"],
                "answer": 2
            },
            {
                "question": "–ß—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å/–ª–∏–¥–µ—Ä –ø–µ—Ä–µ–¥ –Ω–∞–ø–∞–¥–µ–Ω–∏–µ–º?",
                "options": ["–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –≤–∏–ø —á–∞—Ç", "–¢–æ–ª—å–∫–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ /report", "–ù–∞–ø–∏—Å–∞—Ç—å –≤ /report, –∞ —Ç–∞–∫–∂–µ –≤ —Å–ø–µ—Ü.–±–µ—Å–µ–¥—É –≤ VK", "–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–µ–Ω"],
                "answer": 2
            },
            {
                "question": "–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É —á–ª–µ–Ω–æ–≤ –û–ü–ì –ø—Ä–∏ –Ω–∞–ø–∞–¥–µ–Ω–∏–∏ –Ω–∞ –≤/—á?",
                "options": ["–û—Ä—É–∂–∏–µ –∏ –º–∞—Å–∫–∞", "–¢–æ–ª—å–∫–æ –ú–∞—Å–∫–∞", "–¢–æ–ª—å–∫–æ –æ—Ä—É–∂–∏–µ", "–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ"],
                "answer": 0
            }
        ]
    }, 
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ —Ä–∞—Ü–∏–∏ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–∞",
        "id": "deportament",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
        "questions": [
            {
                "question": "–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ —Ä–∞—Ü–∏—è –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞?",
                "options": ["–î–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏", "–î–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –≥–æ—Å—Å.–≤–æ–ª–Ω–æ–π", "–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ì–æ–≤–æ—Ä–∏—Ç—å –æ —Å–≤–æ–∏—Ö –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–∞—Ö –∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"],
                "answer": 1
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ú–µ—Ç–∞–ì–µ–π–º–∏–Ω–≥ –≤ —Ä–∞—Ü–∏–∏ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–∞ (MG)?",
                "options": ["–ù–µ—Ç, —ç—Ç–æ –†–ü —á–∞—Ç", "–î–∞, —ç—Ç–æ –ù–†–ü —á–∞—Ç", "–ú–æ–∂–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏ (...)", "–ú–æ–∂–Ω–æ, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–∞–µ—Ç"],
                "answer": 0
            },
            {
                "question": "–ò–≥—Ä–æ–∫ –≤ —Ä–∞—Ü–∏–∏ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–∞ –ø–∏—à–µ—Ç —á—Ç–æ –ø—Ä–æ–¥–∞–µ—Ç –∞/–º ,–Ω–∞—Ä—É—à–∞–µ—Ç –ª–∏ –æ–Ω –ø—Ä–∞–≤–∏–ª–∞?",
                "options": ["–ù–µ—Ç, —Ç–æ—Ä–≥–æ–≤–ª—è –≤ –¥–∞–Ω–Ω–æ–π —Ä–∞—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞", "–ù–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ", "–ö–æ–Ω–µ—á–Ω–æ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ì–ò–ë–î–î", "–î–∞, –Ω–∞—Ä—É—à–∞–µ—Ç"],
                "answer": 3
            },
            {
                "question": "–†–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –≤ —Ä–∞—Ü–∏—é —Å–æ–æ–±—â–∞—Ç—å –æ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö –≤ –≤–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é?",
                "options": ["–î–∞, —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ", "–ù–µ—Ç, —ç—Ç–æ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞", "–ú–æ–∂–Ω–æ, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ì–°/–ó–ì–° –ì–û–°–° —Ä–∞–∑—Ä–µ—à–∞–µ—Ç", "–ù–µ–ª—å–∑—è, –≤–µ–¥—å –ø–µ—Ä–µ–≤–æ–¥—ã —ç—Ç–æ –ù–†–ü"],
                "answer": 0
            },
            {
                "question": "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ —Ä–∞—Ü–∏—é –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–∞?",
                "options": ["[–í–∞—à–∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è] to [–î—Ä—É–≥–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏]", "(–í–∞—à–∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è) to (–î—Ä—É–≥–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)", "(–í–∞—à–∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è) –∫–æ–º—É (–î—Ä—É–≥–∞—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è)", "–ú–æ–∂–Ω–æ –±–µ–∑ —Å–∫–æ–±–æ–∫ –∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –∞ —Ç–∞–∫–∂–µ –±–µ–∑ —Ç–µ–≥–æ–≤"],
                "answer": 0
            },
            {
                "question": "–ù—É–∂–Ω–æ –ª–∏ —Å–æ–±–ª—é–¥–∞—Ç—å —Å—É–±–±–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤ —Ä–∞—Ü–∏–∏ –¥–µ–ø–æ—Ä—Ç–∞–º–µ–Ω—Ç–∞?",
                "options": ["–ù–µ—Ç, –≤–µ–¥—å —ç—Ç–æ –ù–†–ü —á–∞—Ç", "–ù–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –õ–∏–¥–µ—Ä –∏–ª–∏ –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "–î–∞", "–ù–µ—Ç, –≤–µ–¥—å —ç—Ç–æ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞"],
                "answer": 2
            }
        ]
    }, 
    {
        "title": "–ü—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏",
        "id": "perevod",  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
        "questions": [
            {
                "question": "–ö–∞–∫–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏?",
                "options": ["4 —Ä–∞–Ω–≥", "3 —Ä–∞–Ω–≥", "–õ—é–±–æ–π —Ä–∞–Ω–≥", "6 —Ä–∞–Ω–≥"],
                "answer": 0
            },
            {
                "question": "–ö–∞–∫–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–Ω–≥ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏?",
                "options": ["6 —Ä–∞–Ω–≥", "9 —Ä–∞–Ω–≥", "8 —Ä–∞–Ω–≥", "7 —Ä–∞–Ω–≥"],
                "answer": 3
            },
            {
                "question": "–í –∫–∞–∫–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω –ø–µ—Ä–µ–≤–æ–¥?",
                "options": ["–ì–ò–ë–î–î/–£–ú–í–î/–§–°–ë", "–ì–ò–ë–î–î, –°–ú–ò, –§–°–ò–ù", "–°–ú–ò, –ë–û–õ–¨–ù–ò–¶–ê, –ü–†–ê–í–ò–¢–ï–õ–¨–°–¢–í–û", "–§–°–ë –ò –ü–†–ê–í–ò–¢–ï–õ–¨–°–¢–í–û"],
                "answer": 2
            },
            {
                "question": "–ò–º–µ–µ—Ç –ª–∏ –ª–∏–¥–µ—Ä –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Ä–µ–≤–æ–¥–µ?",
                "options": ["–î–∞", "–ù–µ—Ç, –æ–Ω –æ–±—è–∑–∞–Ω –¥–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"],
                "answer": 0
            },
            {
                "question": "–ö—Ç–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –º–µ–∂–¥—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏?",
                "options": ["–õ–∏–¥–µ—Ä—ã –æ–±–µ–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π", "–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª–∏", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è"],
                "answer": 0
            }
        ]
    }, 
]


class Quiz(StatesGroup):
    choosing_category = State()
    choosing_goss_subcategory = State()
    choosing_section = State()
    answering = State() 
    waiting_photo = State()
    waiting_video = State()

user_scores = {}
user_cooldowns = {}  # user_id: {section_id: last_time}
user_random_questions = {}  # user_id: {section_id: [–∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ä–∞–Ω–¥–æ–º–µ]}

def load_data():
    global user_scores, user_cooldowns
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_scores.update(data.get("scores", {}))
            user_cooldowns.update(data.get("cooldowns", {}))
    else:
        user_scores.clear()
        user_cooldowns.clear()

def save_data():
    data = {
        "scores": user_scores,
        "cooldowns": user_cooldowns
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_photo_id(photo_id):
    with open(PHOTO_ID_FILE, 'w', encoding="utf-8") as f:
        json.dump({"photo_id": photo_id}, f)

def load_photo_id():
    try:
        if os.path.exists(PHOTO_ID_FILE):
            with open(PHOTO_ID_FILE, 'r', encoding="utf-8") as f:
                d = json.load(f)
                return d.get("photo_id")
    except Exception:
        pass
    return None

def save_video_id(video_id):
    with open(VIDEO_ID_FILE, 'w', encoding="utf-8") as f:
        json.dump({"video_id": video_id}, f)

def load_video_id():
    if os.path.exists(VIDEO_ID_FILE):
        with open(VIDEO_ID_FILE, 'r', encoding="utf-8") as f:
            return json.load(f).get("video_id")
    return None

def main_menu(user_id=None):
    kb = [
        [KeyboardButton(text="üìö –†–∞–∑–¥–µ–ª—ã")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢–æ–ø")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    if user_id == ADMIN_ID:
        kb.append([KeyboardButton(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")])
        kb.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def categories_menu():
    kb = [
        [KeyboardButton(text=f"{CATEGORY_EMOJIS.get(cat, '')} {cat}".strip())]
        for cat in CATEGORY_SECTIONS.keys()
    ]
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu(category):
    kb = []
    section_ids = CATEGORY_SECTIONS[category]
    for sec_id in section_ids:
        section = next((s for s in SECTIONS if s["id"] == sec_id), None)
        if section:
            emoji = SECTION_EMOJIS.get(sec_id, DEFAULT_SECTION_EMOJI)
            kb.append([KeyboardButton(text=f"{emoji} {section['title']}")])
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def subcategories_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    for subcat in CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"]:
        kb.add(InlineKeyboardButton(text=subcat, callback_data=f"subcat_{subcat}"))
    return kb

def question_kb(options):
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=o)] for o in options], resize_keyboard=True)

bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    video_id = load_video_id()
    caption = (
        "<b>üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä Black Russia!</b>\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
    if video_id:
        await message.answer_video(
            video=video_id,
            caption=caption,
            reply_markup=main_menu(message.from_user.id)
        )
    else:
        await message.answer(
            caption,
            reply_markup=main_menu(message.from_user.id)
    )

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    photo_id = load_photo_id()
    caption = "üîù <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>"
    if photo_id:
        await message.answer_photo(
            photo=photo_id,
            caption=caption,
            reply_markup=main_menu(message.from_user.id)
        )
    else:
        await message.answer(
            caption,
            reply_markup=main_menu(message.from_user.id)
        )

@dp.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await cmd_menu(message, state)

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer(
        "<b>üïπ –ü–æ–º–æ—â—å</b>\n–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–∞–ª–ª—ã –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø!"
    )

@dp.message(F.text == "üìö –†–∞–∑–¥–µ–ª—ã")
async def choose_category(message: types.Message, state: FSMContext):
    await state.set_state(Quiz.choosing_category)
    await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>", reply_markup=categories_menu())

@dp.message(Quiz.choosing_category)
async def category_selected(message: types.Message, state: FSMContext):
    category = message.text
    for emoji in CATEGORY_EMOJIS.values():
        category = category.replace(emoji, "")
    category = " ".join(category.split())

    if category == "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id))
        await state.clear()
        return

    if category not in CATEGORY_SECTIONS:
        await message.answer("‚ùå –¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=categories_menu())
        return

    await state.update_data(category=category)

    # –î–ª—è –ì–û–°–° ‚Äî –≤—ã–≤–æ–¥–∏–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∫–ª—é—á–∏ —Å–ª–æ–≤–∞—Ä—è)
    if category == "–î–ª—è –ì–û–°–°":
        await state.set_state(Quiz.choosing_goss_subcategory)
        subcats = list(CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"].keys())
        kb = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=subcat)] for subcat in subcats] +
                    [[KeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")], [KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:", reply_markup=kb)
        return

    # –î–ª—è –û–ü–ì ‚Äî –≤—ã–≤–æ–¥–∏–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ —Å–ø–∏—Å–∫—É id
    await state.set_state(Quiz.choosing_section)
    await message.answer(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b> {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=sections_menu(category)
    )

@dp.message(Quiz.choosing_goss_subcategory)
async def goss_subcategory_selected(message: types.Message, state: FSMContext):
    subcat = message.text.strip()
    if subcat == "‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º":
        await state.set_state(Quiz.choosing_category)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_menu())
        return
    if subcat == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.", reply_markup=main_menu(message.from_user.id))
        return

    data = await state.get_data()
    category = data.get("category")
    if category != "–î–ª—è –ì–û–°–°" or subcat not in CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"]:
        await message.answer("‚ùå –¢–∞–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=categories_menu())
        return

    await state.update_data(subcategory=subcat)
    await state.set_state(Quiz.choosing_section)
    # –°–æ–∑–¥–∞—ë–º –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    section_ids = CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"][subcat]
    kb = []
    for sec_id in section_ids:
        section = next((s for s in SECTIONS if s["id"] == sec_id), None)
        if section:
            emoji = SECTION_EMOJIS.get(sec_id, DEFAULT_SECTION_EMOJI)
            kb.append([KeyboardButton(text=f"{emoji} {section['title']}")])
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")])
    kb.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    await message.answer(
        f"<b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é:</b> {subcat}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    )


@dp.callback_query(F.data.startswith("subcat_"))
async def subcategory_goss_handler(callback: types.CallbackQuery):
    subcat = callback.data[len("subcat_"):]
    sections = CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"][subcat]
    kb = InlineKeyboardMarkup(row_width=2)
    for section in sections:
        kb.add(InlineKeyboardButton(text=section, callback_data=f"section_{section}"))
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ {subcat}:", reply_markup=kb)

@dp.message(Quiz.choosing_section)
async def section_selected(message: types.Message, state: FSMContext):
    section_title = message.text.strip()
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º
    for emoji in SECTION_EMOJIS.values():
        section_title = section_title.replace(emoji, "")
    section_title = section_title.strip()

    data = await state.get_data()
    category = data.get("category")
    section_ids = None
    if category == "–î–ª—è –ì–û–°–°":
        subcat = data.get("subcategory")
        if not subcat or subcat not in CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"]:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=categories_menu())
            await state.set_state(Quiz.choosing_category)
            return
        section_ids = CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"][subcat]
    else:
        section_ids = CATEGORY_SECTIONS[category]

    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ –ø–æ title –∏ id
    section = next((s for s in SECTIONS if s["title"] == section_title and s["id"] in section_ids), None)
    if not section:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=sections_menu(category))
        return
    # –î–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞!
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: {section_title}")

    data = await state.get_data()
    category = data.get("category")
    section_ids = None
    if category == "–î–ª—è –ì–û–°–°":
        subcat = data.get("subcategory")
        if not subcat or subcat not in CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"]:
            await message.answer("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ.", reply_markup=categories_menu())
            await state.set_state(Quiz.choosing_category)
            return
        section_ids = CATEGORY_SECTIONS["–î–ª—è –ì–û–°–°"][subcat]
    else:
        section_ids = CATEGORY_SECTIONS[category]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–¥–µ–ª–∞
        section = next((s for s in SECTIONS if s["title"].strip() == section_title.strip() and s["id"] in section_ids), None)
    if not section:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=sections_menu(category))
        return
    # –î–∞–ª—å—à–µ —Ç–≤–æ—è –ª–æ–≥–∏–∫–∞!
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª: {section_title}")

@dp.message(Quiz.answering)
async def answer_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = str(message.from_user.id)
    section_id = data["section_id"]
    q_index = data["q_index"]
    section = next((s for s in SECTIONS if s["id"] == section_id), None)
    if not section:
        await message.answer("–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–∞.")
        await state.clear()
        return

    question_order = user_random_questions.get(user_id, {}).get(section_id)
    if not question_order or q_index >= len(question_order):
        await message.answer("–û—à–∏–±–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    q_real_idx = question_order[q_index]
    q = section["questions"][q_real_idx]
    answer = message.text.strip()
    correct = False
    try:
        correct = q["options"].index(answer) == q["answer"]
    except Exception:
        pass

    if correct:
        user_scores[user_id] = user_scores.get(user_id, 0) + 1
        save_data()
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! +1 –±–∞–ª–ª")
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {q['options'][q['answer']]}")
    next_q_index = q_index + 1
    if next_q_index < len(question_order):
        await state.update_data(q_index=next_q_index)
        next_q_real_idx = question_order[next_q_index]
        next_q = section["questions"][next_q_real_idx]
        await message.answer(
            f"<b>{next_q['question']}</b>",
            reply_markup=question_kb(next_q["options"])
        )
    else:
        # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞
        now = int(time.time())
        if user_id not in user_cooldowns:
            user_cooldowns[user_id] = {}
        user_cooldowns[user_id][section_id] = now
        save_data()
        await message.answer("–†–∞–∑–¥–µ–ª –ø—Ä–æ–π–¥–µ–Ω! –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.", reply_markup=main_menu(message.from_user.id))
        await state.clear()
        # –æ—á–∏—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
        user_random_questions[user_id].pop(section_id, None)

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    score = user_scores.get(user_id, 0)
    text = (
        f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
        f"‚îè ID: <code>{user_id}</code>\n"
        f"‚î£ –ë–∞–ª–ª—ã: <b>{score}</b> ‚≠ê\n"
    )
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üèÜ –¢–æ–ø")
async def top_cmd(message: types.Message):
    if not user_scores:
        await message.answer("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –±–∞–ª–ª—ã. –ë—É–¥—å –ø–µ—Ä–≤—ã–º!", reply_markup=main_menu(message.from_user.id))
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "üèÜ <b>–¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:</b>\n"
    for i, (uid, score) in enumerate(top, 1):
        text += f"{i}) <code>{uid}</code> ‚Äî <b>{score}‚≠ê</b>\n"
    await message.answer(text, reply_markup=main_menu(message.from_user.id))

@dp.message(F.text == "üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
async def change_photo_command(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(Quiz.waiting_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:")

@dp.message(Quiz.waiting_photo, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    photo_id = message.photo[-1].file_id
    save_photo_id(photo_id)
    await state.clear()
    await message.answer("–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

@dp.message(Command("setstartvideo"))
async def set_start_video(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await state.set_state(Quiz.waiting_video)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –ø—Ä–∏ /start.")

@dp.message(Quiz.waiting_video, F.video)
async def handle_video(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    video_id = message.video.file_id
    save_video_id(video_id)
    await state.clear()
    await message.answer("–í–∏–¥–µ–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ñ–º–∏ 'üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–ª–∏ /menu.")

load_data()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
