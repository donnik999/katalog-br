import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from datetime import datetime, timedelta

TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550
DATA_FILE = "user_scores.json"
COOLDOWN_SEC = 3600  # 1 —á–∞—Å

# --- –í–û–ü–†–û–°–´ –ü–û –†–ê–ó–î–ï–õ–ê–ú ---
SECTIONS = [
    {
        "title": "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã",
        "id": "common",
        "questions": [
            {
                "question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
                "options": ["–ú–æ—Å–∫–≤–∞", "–°–æ—á–∏", "–ö–∞–∑–∞–Ω—å", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
                "answer": 0
            },
            {
                "question": "2 + 2 = ?",
                "options": ["3", "4", "5", "22"],
                "answer": 1
            },
            {
                "question": "Python ‚Äî —ç—Ç–æ?",
                "options": ["–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–†–µ–∫–∞", "–ü—Ç–∏—Ü–∞", "–ì–æ—Ä–æ–¥"],
                "answer": 0
            }
        ]
    },
    {
        "title": "–ß–∏—Å–ª–∞",
        "id": "numbers",
        "questions": [
            {
                "question": "5 * 6 = ?",
                "options": ["11", "30", "56", "26"],
                "answer": 1
            },
            {
                "question": "7 + 8 = ?",
                "options": ["15", "16", "14", "13"],
                "answer": 0
            }
        ]
    }
    # –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –≤–æ–ø—Ä–æ—Å—ã —Ç—É—Ç!
]

HELP_TEXT = (
    "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n"
    "‚Äî –í—ã–±–µ—Ä–∏ '–†–∞–∑–¥–µ–ª—ã', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏–∑ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–º—ã.\n"
    "‚Äî –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã.\n"
    "‚Äî –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–∫—É–ª–¥–∞—É–Ω) –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.\n"
    "‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Å—á—ë—Ç: '–ü—Ä–æ—Ñ–∏–ª—å'.\n"
    "‚Äî –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤: '–¢–æ–ø'.\n"
    "‚Äî –î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é: /menu\n"
    "‚Äî –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."
)

WELCOME_TEXT = (
    "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—Ä–µ–Ω–∞–∂—ë—Ä/–≤–∏–∫—Ç–æ—Ä–∏–Ω—É!</b>\n"
    "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è.\n"
    "–ó–∞ –≤–µ—Ä–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–∞–π –±–∞–ª–ª—ã –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤! üéâ"
)

PROFILE_TEMPLATE = (
    "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
    "ID: <code>{user_id}</code>\n"
    "–ë–∞–ª–ª—ã: <b>{score}</b>"
)

# --- –§–°–ú –°–û–°–¢–û–Ø–ù–ò–Ø ---
class Quiz(StatesGroup):
    section = State()
    question = State()

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ---
user_scores = {}
user_cooldowns = {}  # {user_id: {section_id: timestamp}}

# --- –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê ---
def load_scores():
    global user_scores, user_cooldowns
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            user_scores = data.get("scores", {})
            user_cooldowns = data.get("cooldowns", {})
    else:
        user_scores = {}
        user_cooldowns = {}

def save_scores():
    data = {
        "scores": user_scores,
        "cooldowns": user_cooldowns
    }
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    kb = [
        [KeyboardButton(text="–†–∞–∑–¥–µ–ª—ã")],
        [KeyboardButton(text="–ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="–¢–æ–ø")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ]
    if ADMIN_ID:
        kb.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu():
    kb = [[KeyboardButton(text=sec['title'])] for sec in SECTIONS]
    kb.append([KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def question_kb(options):
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=o)] for o in options], resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- –ë–û–¢ ---
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

@dp.message(Command("start", "menu"))
async def start(message: types.Message, state: FSMContext):
    photo = FSInputFile("welcome.jpg") if os.path.exists("welcome.jpg") else None
    await state.clear()
    if photo:
        await message.answer_photo(photo, caption=WELCOME_TEXT, reply_markup=main_menu())
    else:
        await message.answer(WELCOME_TEXT, reply_markup=main_menu())

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message(lambda m: m.text == "–ü–æ–º–æ—â—å")
async def help_cmd(message: types.Message):
    await message.answer(HELP_TEXT, reply_markup=main_menu())

@dp.message(lambda m: m.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def profile_cmd(message: types.Message):
    user_id = str(message.from_user.id)
    score = user_scores.get(user_id, 0)
    await message.answer(PROFILE_TEMPLATE.format(user_id=user_id, score=score), reply_markup=main_menu())

@dp.message(lambda m: m.text == "–¢–æ–ø")
async def top_cmd(message: types.Message):
    if not user_scores:
        await message.answer("–¢–æ–ø –ø—É—Å—Ç.", reply_markup=main_menu())
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "<b>üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:</b>\n"
    for i, (uid, score) in enumerate(top, 1):
        text += f"{i}) <code>{uid}</code> ‚Äî <b>{score}</b>\n"
    await message.answer(text, reply_markup=main_menu())

@dp.message(lambda m: m.text == "–†–∞–∑–¥–µ–ª—ã")
async def sections_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:", reply_markup=sections_menu())

@dp.message(lambda m: any(m.text == sec['title'] for sec in SECTIONS))
async def start_section(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    section = next(sec for sec in SECTIONS if sec["title"] == message.text)
    sid = section["id"]
    now = datetime.now().timestamp()
    user_cd = user_cooldowns.get(user_id, {})
    cd = user_cd.get(sid, 0)
    if now < cd:
        left = int(cd - now)
        await message.answer(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–æ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ {left//60} –º–∏–Ω {left%60} —Å–µ–∫", reply_markup=main_menu())
        return
    await state.set_state(Quiz.question)
    await state.update_data(sec_id=sid, q_idx=0, score=0)
    q = section["questions"][0]
    await message.answer(f"<b>–í–æ–ø—Ä–æ—Å 1/{len(section['questions'])}:</b>\n{q['question']}", reply_markup=question_kb(q["options"]))

@dp.message(Quiz.question)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    sec_id = data["sec_id"]
    section = next(sec for sec in SECTIONS if sec["id"] == sec_id)
    questions = section["questions"]
    q_idx = data["q_idx"]
    score = data["score"]
    q = questions[q_idx]
    user_ans = message.text.strip()
    if user_ans not in q["options"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π.", reply_markup=question_kb(q["options"]))
        return
    if q["options"].index(user_ans) == q["answer"]:
        score += 1
    q_idx += 1
    if q_idx < len(questions):
        await state.update_data(q_idx=q_idx, score=score)
        q = questions[q_idx]
        await message.answer(f"<b>–í–æ–ø—Ä–æ—Å {q_idx+1}/{len(questions)}:</b>\n{q['question']}", reply_markup=question_kb(q["options"]))
    else:
        user_id = str(message.from_user.id)
        user_scores[user_id] = user_scores.get(user_id, 0) + score
        cd_until = (datetime.now() + timedelta(seconds=COOLDOWN_SEC)).timestamp()
        user_cooldowns.setdefault(user_id, {})[sec_id] = cd_until
        save_scores()
        await message.answer(
            f"‚úÖ <b>–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!</b>\n–¢–≤–æ–∏ –±–∞–ª–ª—ã –∑–∞ —Ä–∞–∑–¥–µ–ª: <b>{score} –∏–∑ {len(questions)}</b>\n"
            f"–û–±—â–∏–π —Å—á—ë—Ç: <b>{user_scores[user_id]}</b>\n\n"
            f"–ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–π—Ç–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ 1 —á–∞—Å.",
            reply_markup=main_menu()
        )
        await state.clear()

# --- –ê–î–ú–ò–ù ---
@dp.message(lambda m: m.text == "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é" and m.from_user.id == ADMIN_ID)
async def admin_menu_cmd(message: types.Message):
    await message.answer("üëë <b>–ê–¥–º–∏–Ω-–º–µ–Ω—é</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu())

@dp.message(lambda m: m.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and m.from_user.id == ADMIN_ID)
async def admin_save(message: types.Message):
    save_scores()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=admin_menu())

@dp.message(lambda m: m.text == "üìù –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø" and m.from_user.id == ADMIN_ID)
async def admin_show(message: types.Message):
    await top_cmd(message)

@dp.message(lambda m: m.text == "üßπ –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ–ø" and m.from_user.id == ADMIN_ID)
async def admin_reset(message: types.Message):
    global user_scores
    user_scores = {}
    save_scores()
    await message.answer("–¢–æ–ø —Å–±—Ä–æ—à–µ–Ω.", reply_markup=admin_menu())

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–ì–û –ü–†–û–ß–ï–ì–û ---
@dp.message()
async def fallback(message: types.Message):
    await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ñ–º–∏ '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –∏–ª–∏ /menu.")

# --- –ó–ê–ì–†–£–ó–ö–ê –ü–†–ò –°–¢–ê–†–¢–ï ---
load_scores()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
