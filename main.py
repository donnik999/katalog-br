import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
import asyncio
import os

# –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô –¢–û–ö–ï–ù –¢–£–¢
BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"

# –í–∞—à Telegram ID –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID)
ADMIN_IDS = [6712617550]  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π id

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class AdCreation(StatesGroup):
    category = State()
    subcategory = State()
    title = State()
    description = State()
    price = State()
    confirm = State()

# –ü–∞–º—è—Ç—å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
ads = []
ad_id_counter = 1

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = {
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": {
        "–ú–æ—Ç–æ": "–ú–æ—Ç–æ",
        "–ê–≤—Ç–æ": "–ê–≤—Ç–æ",
        "–ì—Ä—É–∑–æ–≤–æ–π —Ç/—Å": "–ì—Ä—É–∑–æ–≤–æ–π —Ç/—Å",
        "–ü–ª–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞": "–ü–ª–∞–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞",
    },
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": None,
    "–û–¥–µ–∂–¥–∞": None,
    "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å": None,
    "–ë–∏–∑–Ω–µ—Å—ã": None
}

def get_main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ", callback_data="add_ad")
    kb.button(text="üóÇ –ö–∞—Ç–∞–ª–æ–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π", callback_data="catalog")
    kb.button(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
    kb.adjust(1)
    return kb.as_markup()

def get_categories_menu():
    kb = InlineKeyboardBuilder()
    for cat in CATEGORIES:
        kb.button(text=cat, callback_data=f"cat_{cat}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    kb.adjust(1)
    return kb.as_markup()

def get_subcategories_menu(category):
    kb = InlineKeyboardBuilder()
    for subcat in CATEGORIES[category]:
        kb.button(text=subcat, callback_data=f"subcat_{subcat}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="choose_category")
    kb.adjust(1)
    return kb.as_markup()

def get_catalog_menu():
    kb = InlineKeyboardBuilder()
    for cat in CATEGORIES:
        kb.button(text=cat, callback_data=f"catalog_{cat}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    kb.adjust(1)
    return kb.as_markup()

def get_ads_by_category(cat, subcat=None):
    filtered = []
    for ad in ads:
        if ad['category'] == cat:
            if subcat:
                if ad.get('subcategory') == subcat:
                    filtered.append(ad)
            else:
                filtered.append(ad)
    return filtered

def get_my_ads(user_id):
    return [ad for ad in ads if ad['user_id'] == user_id]

def get_ad_menu(ad, user_id):
    kb = InlineKeyboardBuilder()
    if user_id in ADMIN_IDS or ad["user_id"] == user_id:
        kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{ad['id']}")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="catalog")
    kb.adjust(1)
    return kb.as_markup()

async def main():
    bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())

    @dp.message(CommandStart())
    async def start(message: Message):
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ Black Russia.",
            reply_markup=get_main_menu()
        )

    @dp.message(Command("menu"))
    async def menu(message: Message):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    @dp.callback_query(F.data == "main_menu")
    async def cb_main_menu(callback: CallbackQuery):
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    @dp.callback_query(F.data == "about")
    async def cb_about(callback: CallbackQuery):
        await callback.message.edit_text(
            "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∏–≥—Ä–µ Black Russia (CRMP Mobile).\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—â–∞—Ç—å —Å–≤–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏.",
            reply_markup=get_main_menu()
        )

    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
    @dp.callback_query(F.data == "add_ad")
    async def cb_add_ad(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await state.set_state(AdCreation.category)
        kb = get_categories_menu()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

    @dp.callback_query(F.data.startswith("cat_"))
    async def cb_choose_subcat(callback: CallbackQuery, state: FSMContext):
        category = callback.data[4:]
        await state.update_data(category=category)
        if CATEGORIES[category]:
            kb = get_subcategories_menu(category)
            await state.set_state(AdCreation.subcategory)
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        else:
            await state.set_state(AdCreation.title)
            await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    @dp.callback_query(F.data.startswith("subcat_"))
    async def cb_subcat(callback: CallbackQuery, state: FSMContext):
        subcategory = callback.data[7:]
        await state.update_data(subcategory=subcategory)
        await state.set_state(AdCreation.title)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    @dp.message(AdCreation.category)
    async def msg_category(message: Message, state: FSMContext):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã—à–µ.")

    @dp.message(AdCreation.subcategory)
    async def msg_subcategory(message: Message, state: FSMContext):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã—à–µ.")

    @dp.message(AdCreation.title)
    async def msg_title(message: Message, state: FSMContext):
        await state.update_data(title=message.text)
        await state.set_state(AdCreation.description)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")

    @dp.message(AdCreation.description)
    async def msg_description(message: Message, state: FSMContext):
        await state.update_data(description=message.text)
        await state.set_state(AdCreation.price)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É:")

    @dp.message(AdCreation.price)
    async def msg_price(message: Message, state: FSMContext):
        await state.update_data(price=message.text)
        data = await state.get_data()
        text = "<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:</b>\n\n"
        text += f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('category')}\n"
        if data.get('subcategory'):
            text += f"<b>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {data.get('subcategory')}\n"
        text += f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data.get('title')}\n"
        text += f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description')}\n"
        text += f"<b>–¶–µ–Ω–∞:</b> {data.get('price')}\n"
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="confirm_ad"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_ad")
                ]
            ]
        )
        await state.set_state(AdCreation.confirm)
        await message.answer(text, reply_markup=kb)

    @dp.callback_query(F.data == "cancel_ad")
    async def cb_cancel_ad(callback: CallbackQuery, state: FSMContext):
        await state.clear()
        await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())

    @dp.callback_query(F.data == "confirm_ad")
    async def cb_confirm_ad(callback: CallbackQuery, state: FSMContext):
        global ad_id_counter
        data = await state.get_data()
        ad = {
            "id": ad_id_counter,
            "user_id": callback.from_user.id,
            "username": callback.from_user.username,
            "category": data.get("category"),
            "subcategory": data.get("subcategory"),
            "title": data.get("title"),
            "description": data.get("description"),
            "price": data.get("price"),
        }
        ads.append(ad)
        ad_id_counter += 1
        await state.clear()
        await callback.message.edit_text("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ!", reply_markup=get_main_menu())

    # –ö–∞—Ç–∞–ª–æ–≥
    @dp.callback_query(F.data == "catalog")
    async def cb_catalog(callback: CallbackQuery):
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_catalog_menu())

    @dp.callback_query(F.data.startswith("catalog_"))
    async def cb_catalog_category(callback: CallbackQuery):
        cat = callback.data[8:]
        if CATEGORIES[cat]:
            kb = InlineKeyboardBuilder()
            for subcat in CATEGORIES[cat]:
                kb.button(text=subcat, callback_data=f"catalog_{cat}_{subcat}")
            kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="catalog")
            kb.adjust(1)
            await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {cat}:", reply_markup=kb.as_markup())
        else:
            matched_ads = get_ads_by_category(cat)
            if not matched_ads:
                await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_catalog_menu())
                return
            await send_ads_list(callback, matched_ads, cat)

    @dp.callback_query(F.data.regexp(r"^catalog_(.+)_(.+)$"))
    async def cb_catalog_subcat(callback: CallbackQuery):
        _, cat, subcat = callback.data.split("_", 2)
        matched_ads = get_ads_by_category(cat, subcat)
        if not matched_ads:
            await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_catalog_menu())
            return
        await send_ads_list(callback, matched_ads, cat, subcat)

    async def send_ads_list(callback, ads_list, cat, subcat=None):
        text = f"<b>–û–±—ä—è–≤–ª–µ–Ω–∏—è - {cat}"
        if subcat:
            text += f" / {subcat}"
        text += ":</b>\n\n"
        if not ads_list:
            text += "–ü–æ–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ—Ç."
            await callback.message.edit_text(text, reply_markup=get_catalog_menu())
            return
        for ad in ads_list:
            ad_text = (
                f"üîπ <b>{ad['title']}</b>\n"
                f"{ad['description']}\n"
                f"<b>–¶–µ–Ω–∞:</b> {ad['price']}\n"
                f"<b>–ê–≤—Ç–æ—Ä:</b> @{ad['username'] if ad['username'] else ad['user_id']}\n"
                f"<code>/ad_{ad['id']}</code>\n\n"
            )
            await callback.message.answer(ad_text, reply_markup=get_ad_menu(ad, callback.from_user.id))
        await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=get_catalog_menu())

    @dp.message(F.text.regexp(r"^/ad_(\d+)$"))
    async def msg_view_ad(message: Message):
        ad_id = int(message.text.split("_")[1])
        ad = next((a for a in ads if a["id"] == ad_id), None)
        if not ad:
            await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        ad_text = (
            f"üîπ <b>{ad['title']}</b>\n"
            f"{ad['description']}\n"
            f"<b>–¶–µ–Ω–∞:</b> {ad['price']}\n"
            f"<b>–ê–≤—Ç–æ—Ä:</b> @{ad['username'] if ad['username'] else ad['user_id']}\n"
        )
        await message.answer(ad_text, reply_markup=get_ad_menu(ad, message.from_user.id))

    # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    @dp.callback_query(F.data.startswith("delete_"))
    async def cb_delete_ad(callback: CallbackQuery):
        ad_id = int(callback.data.split("_")[1])
        ad = next((a for a in ads if a["id"] == ad_id), None)
        if not ad:
            await callback.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)
            return
        if callback.from_user.id not in ADMIN_IDS and callback.from_user.id != ad["user_id"]:
            await callback.answer("–£–¥–∞–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –µ–≥–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.", show_alert=True)
            return
        ads.remove(ad)
        await callback.message.edit_text("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=get_main_menu())

    # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    @dp.callback_query(F.data == "choose_category")
    async def cb_choose_category(callback: CallbackQuery, state: FSMContext):
        await state.set_state(AdCreation.category)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_categories_menu())

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback
    @dp.callback_query()
    async def cb_unknown(callback: CallbackQuery):
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
