import json
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from datetime import datetime, timedelta

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"
ADMIN_ID = 6712617550
DATA_FILE = "user_scores.json"
COOLDOWN_SEC = 3600  # 1 —á–∞—Å

# --- –®–ê–ë–õ–û–ù–´ –í–û–ü–†–û–°–û–í (–ø—Ä–∏–º–µ—Ä) ---
QUESTIONS = [
    {
        "question": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
        "options": ["–ú–æ—Å–∫–≤–∞", "–ü–∏—Ç–µ—Ä", "–ö–∞–∑–∞–Ω—å", "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫"],
        "answer": 0
    },
    {
        "question": "2+2?",
        "options": ["3", "4", "5", "22"],
        "answer": 1
    },
    {
        "question": "Python ‚Äî —ç—Ç–æ?",
        "options": ["–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "–†–µ–∫–∞", "–ü—Ç–∏—Ü–∞", "–ì–æ—Ä–æ–¥"],
        "answer": 0
    }
    # –î–æ–±–∞–≤—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç—É—Ç!
]

# --- –°–û–°–¢–û–Ø–ù–ò–Ø ---
class Quiz(StatesGroup):
    question = State()

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ---
user_scores = {}
user_cooldowns = {}  # user_id: timestamp

# --- –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò ---
def load_scores():
    global user_scores, user_cooldowns
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            data = json.load(f)
            user_scores = data.get("scores", {})
            user_cooldowns = data.get("cooldowns", {})
    else:
        user_scores = {}
        user_cooldowns = {}

def save_scores():
    data = {
        "scores": user_scores,
        "cooldowns": user_cooldowns
    }
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# --- –ö–ù–û–ü–ö–ò ---
def main_menu():
    kb = [[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")]]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_menu():
    kb = [
        [KeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="üìù –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# --- –ë–û–¢ ---
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ñ–º–∏ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=main_menu())

@dp.message(lambda m: m.text == "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
async def start_quiz(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    now = datetime.now().timestamp()
    cd = user_cooldowns.get(user_id, 0)
    if now < cd:
        left = int(cd - now)
        await message.answer(f"–ú–æ–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç —Ä–∞–∑ –≤ —á–∞—Å! –û—Å—Ç–∞–ª–æ—Å—å: {left//60} –º–∏–Ω {left%60} —Å–µ–∫")
        return
    await state.set_state(Quiz.question)
    await state.update_data(q_idx=0, score=0)
    await send_question(message, state, 0)

async def send_question(message, state, idx):
    q = QUESTIONS[idx]
    kb = [[KeyboardButton(text=opt)] for opt in q["options"]]
    await message.answer(
        f"–í–æ–ø—Ä–æ—Å {idx+1}/{len(QUESTIONS)}:\n{q['question']}",
        reply_markup=ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    )

@dp.message(Quiz.question)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    idx = data["q_idx"]
    score = data["score"]
    q = QUESTIONS[idx]
    user_ans = message.text.strip()
    if user_ans not in q["options"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∫–Ω–æ–ø–∫–æ–π.")
        return
    if q["options"].index(user_ans) == q["answer"]:
        score += 1
    idx += 1
    if idx < len(QUESTIONS):
        await state.update_data(q_idx=idx, score=score)
        await send_question(message, state, idx)
    else:
        user_id = str(message.from_user.id)
        user_scores[user_id] = score
        user_cooldowns[user_id] = (datetime.now() + timedelta(seconds=COOLDOWN_SEC)).timestamp()
        save_scores()
        await message.answer(f"–¢–µ—Å—Ç –æ–∫–æ–Ω—á–µ–Ω!\n–¢—ã –Ω–∞–±—Ä–∞–ª: {score} –∏–∑ {len(QUESTIONS)}",
                             reply_markup=main_menu())
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await state.clear()

@dp.message(lambda m: m.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and m.from_user.id == ADMIN_ID)
async def admin_panel(message: types.Message):
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu())

@dp.message(lambda m: m.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and m.from_user.id == ADMIN_ID)
async def admin_save(message: types.Message):
    save_scores()
    await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", reply_markup=admin_menu())

@dp.message(lambda m: m.text == "üìù –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ" and m.from_user.id == ADMIN_ID)
async def admin_show(message: types.Message):
    await message.answer(f"<code>{json.dumps(user_scores, indent=2, ensure_ascii=False)}</code>", parse_mode="HTML")

@dp.message(lambda m: m.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def to_main(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu())

@dp.message()
async def fallback(message: types.Message):
    if message.from_user.id == ADMIN_ID and message.text.lower() == "–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
        await admin_panel(message)
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ñ–º–∏ /start.")

# --- –ê–í–¢–û–ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
load_scores()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
