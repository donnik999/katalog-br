import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta

# ==== –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ====
BOT_TOKEN = "7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU"  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

COOLDOWN_SECONDS = 5 * 60  # 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª

# ==== –í–û–ü–†–û–°–´ –ò –†–ê–ó–î–ï–õ–´ ====
# –¢—É—Ç —Ç—ã –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–∞–∫–æ–º—É —à–∞–±–ª–æ–Ω—É:
SECTIONS = {
    "–í–æ–π–Ω–∞ –∑–∞ –±–∏–∑–Ω–µ—Å": [
        {
            "question": "–í–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤–æ–π–Ω—É –∑–∞ –±–∏–∑–Ω–µ—Å?",
            "answers": [
                "–° 00:00 –¥–æ 12:00",
                "–° 12:00 –¥–æ 23:00",
                "–° 18:00 –¥–æ 06:00",
                "–í –ª—é–±–æ–µ –≤—Ä–µ–º—è"
            ],
            "correct": 1
        },
        {
            "question": "–°–∫–æ–ª—å–∫–æ –±–∞–Ω–¥ –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –±–∏–∑–≤–∞—Ä–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?",
            "answers": [
                "1",
                "2",
                "3",
                "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
            ],
            "correct": 1
        }
    ],
    "–û–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞": [
        {
            "question": "–ú–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —á–∏—Ç—ã?",
            "answers": [
                "–î–∞",
                "–ù–µ—Ç",
                "–¢–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞",
                "–ï—Å–ª–∏ –Ω–µ –ø–æ–π–º–∞—é—Ç"
            ],
            "correct": 1
        }
    ]
}
# –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª ‚Äî –∫–æ–ø–∏—Ä—É–π –±–ª–æ–∫ –≤—ã—à–µ, –º–µ–Ω—è–π –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–æ–ø—Ä–æ—Å—ã.

# ==== FSM State Machine ====
class QuizStates(StatesGroup):
    choosing_section = State()
    answering = State()

# ==== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====
bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# user_id -> {section: datetime_of_last_try}
user_cooldowns = {}
# user_id -> score
user_scores = {}

# ==== –ö–ù–û–ü–ö–ò ====
def main_menu():
    kb = [
        [types.KeyboardButton(text="üóÇ –†–∞–∑–¥–µ–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤")],
        [types.KeyboardButton(text="üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def sections_menu():
    kb = [[types.KeyboardButton(text=f"üìö {section}")]
          for section in SECTIONS.keys()]
    kb.append([types.KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def answers_kb(anslist):
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=a)] for a in anslist],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç"
    )

# ==== –•–≠–ù–î–õ–ï–†–´ ====

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "<b>üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É Black Russia!</b>\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=main_menu()
    )

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üîù <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>", reply_markup=main_menu())

@dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: types.Message, state: FSMContext):
    await cmd_menu(message, state)

@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_handler(message: types.Message):
    await message.answer(
        "‚úçÔ∏è <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞–∑–¥–µ–ª—ã?</b>\n"
        "1. –û—Ç–∫—Ä–æ–π —Ñ–∞–π–ª <code>main.py</code>.\n"
        "2. –ù–∞–π–¥–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é <code>SECTIONS</code> –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.\n"
        "3. –î–æ–±–∞–≤—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ —à–∞–±–ª–æ–Ω—É:\n\n"
        "<code>\"–ò–º—è —Ä–∞–∑–¥–µ–ª–∞\": [\n"
        "  {\"question\": \"–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞\", \"answers\": [\"–í–∞—Ä–∏–∞–Ω—Ç1\", \"–í–∞—Ä–∏–∞–Ω—Ç2\"], \"correct\": 0},\n"
        "  ...\n"
        "]</code>\n"
        "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.\n\n"
        "–ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 1 –±–∞–ª–ª.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç.\n"
        "–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é."
    )

@dp.message(F.text == "üóÇ –†–∞–∑–¥–µ–ª—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
async def choose_section(message: types.Message, state: FSMContext):
    if not SECTIONS:
        await message.answer("‚ùå –†–∞–∑–¥–µ–ª—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    await state.set_state(QuizStates.choosing_section)
    await message.answer("<b>–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b>", reply_markup=sections_menu())

@dp.message(QuizStates.choosing_section)
async def section_selected(message: types.Message, state: FSMContext):
    section = message.text.replace("üìö ", "").strip()
    if section == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await back_to_main_menu(message, state)
        return
    if section not in SECTIONS:
        await message.answer("‚ùå –¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
    uid = str(message.from_user.id)
    now = datetime.utcnow()
    cooldowns = user_cooldowns.get(uid, {})
    last_time = cooldowns.get(section)
    if last_time and (now - last_time).total_seconds() < COOLDOWN_SECONDS:
        mins = int((COOLDOWN_SECONDS - (now - last_time).total_seconds()) // 60) + 1
        await message.answer(f"‚è± –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {mins} –º–∏–Ω.")
        return
    questions = SECTIONS[section]
    await state.update_data(
        section=section,
        questions=questions,
        index=0,
        score=0
    )
    await ask_question(message, state)

async def ask_question(message, state: FSMContext):
    data = await state.get_data()
    idx = data["index"]
    questions = data["questions"]
    section = data["section"]
    if idx >= len(questions):
        uid = str(message.from_user.id)
        user_scores[uid] = user_scores.get(uid, 0) + data["score"]
        cooldowns = user_cooldowns.get(uid, {})
        cooldowns[section] = datetime.utcnow()
        user_cooldowns[uid] = cooldowns
        await message.answer(
            f"‚úÖ <b>–†–∞–∑–¥–µ–ª \"{section}\" –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n"
            f"–¢–≤–æ–∏ –±–∞–ª–ª—ã: <b>{data['score']} –∏–∑ {len(questions)}</b>\n\n"
            f"–ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–æ–ø–µ.",
            reply_markup=main_menu()
        )
        await state.clear()
        return
    q = questions[idx]
    await state.set_state(QuizStates.answering)
    await state.update_data(q_current=q)
    await message.answer(
        f"<b>–í–æ–ø—Ä–æ—Å {idx+1} –∏–∑ {len(questions)}\n\n{q['question']}</b>",
        reply_markup=answers_kb(q["answers"])
    )

@dp.message(QuizStates.answering)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q = data["q_current"]
    idx = data["index"]
    questions = data["questions"]
    section = data["section"]
    score = data["score"]
    user_answer = message.text.strip()
    if user_answer not in q["answers"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    correct = q["answers"][q["correct"]]
    if user_answer == correct:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ!")
        score += 1
    else:
        await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct}</b>")
    idx += 1
    await state.update_data(index=idx, score=score)
    await ask_question(message, state)

@dp.message(F.text == "üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤")
async def show_top(message: types.Message, state: FSMContext):
    if not user_scores:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return
    top = sorted(user_scores.items(), key=lambda x: x[1], reverse=True)[:10]
    text = "<b>üèÜ –¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–∞–º:</b>\n\n"
    for i, (uid, bal) in enumerate(top, 1):
        try:
            user = await bot.get_chat(uid)
            name = user.full_name if user else f"User {uid}"
        except Exception:
            name = f"User {uid}"
        text += f"{i}. <b>{name}</b> ‚Äî {bal} –±–∞–ª–ª–æ–≤\n"
    await message.answer(text)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
