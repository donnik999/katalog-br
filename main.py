import logging
from aiogram import Bot, Dispatcher, types, executor
import random
import asyncio

API_TOKEN = '7220830808:AAE7R_edzGpvUNboGOthydsT9m81TIfiqzU'  # <-- –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORIES = {
    "–ü–î–î": [
        {"question": "–ö–∞–∫–æ–≤–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ—Ä–æ–¥–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Black Russia?", "answer": "60 –∫–º/—á"},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ –æ–±–≥–æ–Ω—è—Ç—å –Ω–∞ —Å–ø–ª–æ—à–Ω–æ–π –ª–∏–Ω–∏–∏?", "answer": "–ù–µ—Ç"}
    ],
    "RP –∫–æ–º–∞–Ω–¥—ã": [
        {"question": "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ /me –≤ RP –æ—Ç—ã–≥—Ä–æ–≤–∫–µ?", "answer": "–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"},
        {"question": "–î–ª—è —á–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /do?", "answer": "–û–ø–∏—Å–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏"}
    ],
    "–ê—Ä–µ—Å—Ç / –ø–æ–ª–∏—Ü–∏—è": [
        {"question": "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∞—Ä–µ—Å—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø–æ–ª–∏—Ü–∏–∏?", "answer": "–ü–æ–¥—á–∏–Ω–∏—Ç—å—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ –æ—Ç—ã–≥—Ä—ã–≤–∞—Ç—å RP"},
        {"question": "–ú–æ–∂–Ω–æ –ª–∏ —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –æ—Ç –∞—Ä–µ—Å—Ç–∞ –±–µ–∑ –æ—Ç—ã–≥—Ä–æ–≤–∫–∏?", "answer": "–ù–µ—Ç"}
    ]
}

user_stats = {}
user_current_question = {}
user_current_category = {}

# /start
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø RP —Ç—Ä–µ–Ω–∞–∂–µ—Ä –¥–ª—è Black Russia.\n"
        f"–¢–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫: @bunkoc / @tunkoc\n"
        f"–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç."
    )

# /quiz ‚Äî –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(commands=['quiz'])
async def select_category(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in CATEGORIES.keys():
        markup.add(cat)
    await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞
@dp.message_handler(lambda message: message.text in CATEGORIES)
async def start_category_quiz(message: types.Message):
    user_id = message.from_user.id
    category = message.text
    user_current_category[user_id] = category
    user_stats[user_id] = {"correct": 0, "total": 0}
    await send_new_question(user_id)

async def send_new_question(user_id):
    category = user_current_category[user_id]
    question = random.choice(CATEGORIES[category])
    user_current_question[user_id] = question
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç")
    await bot.send_message(
        user_id,
        f"‚ùì [{category}] –í–æ–ø—Ä–æ—Å:\n{question['question']}",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.message_handler(lambda message: True)
async def handle_answer(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_current_question:
        await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é /quiz.")
        return

    question = user_current_question[user_id]
    correct_answer = question['answer'].lower()
    user_reply = message.text.lower()

    if user_reply == "–ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç":
        await message.reply(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")
        user_stats[user_id]["total"] += 1
        await send_new_question(user_id)
        return

    user_stats[user_id]["total"] += 1

    if len(correct_answer.split()) > 3 and correct_answer == user_reply:
        await message.reply("ü§î –í–∞—à –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂ –Ω–∞ —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä—É–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!")
        return

    if correct_answer == user_reply:
        user_stats[user_id]["correct"] += 1
        await message.reply("üéØ –í–µ—Ä–Ω–æ!")
    else:
        await message.reply(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}")

    await send_new_question(user_id)

# /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    stats = user_stats.get(user_id)
    if not stats:
        await message.reply("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏ —Å /quiz.")
        return
    await message.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats['correct']} –∏–∑ {stats['total']}")
